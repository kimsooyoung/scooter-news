{"version":3,"sources":["components/TheVerge.js","App.js","serviceWorker.js","index.js"],"names":["TheVerge","title","url","published","image_url","className","href","src","alt","App","useState","loading","setLoading","articles","setArticles","getMovies","a","axios","get","data","console","log","useEffect","id","setInterval","clearInterval","map","article","key","_id","image","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAmBeA,G,MAhBE,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACzC,OACE,yBAAKC,UAAU,WACb,uBAAGC,KAAMJ,GACP,yBAAKK,IAAKH,EAAWI,IAAKP,EAAOA,MAAOA,KAE1C,yBAAKI,UAAU,iBACb,uBAAGA,UAAU,iBAAiBC,KAAMJ,GACjCD,GAEH,wBAAII,UAAU,sBAAsBF,OC2D7BM,G,MAnEH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,KAKVC,EAAS,uCAAG,8BAAAC,EAAA,sEAGNC,IAAMC,IACd,+FAJc,gBAENC,EAFM,EAEdA,KAAQA,KAIVC,QAAQC,IAAIF,GACZP,GAAW,GACXE,EAAYK,GARI,2CAAH,qDAgBf,OALAG,qBAAU,WACR,IAAIC,EAAKC,YAAYT,EAAW,KAChC,OAAO,kBAAMU,cAAcF,MAC1B,CAACZ,IAGF,yBAAKN,UAAU,OACZM,EACC,yBAAKN,UAAU,UACb,yBAAKA,UAAU,gBAAf,mBAGF,yBAAKA,UAAU,OACb,4BAAQA,UAAU,qBAChB,yBAAKA,UAAU,SACb,0BAAMA,UAAU,eAAhB,0BAEF,6BACE,4BACE,4BACE,yBACEA,UAAU,WACVE,IAAI,mKAGR,4BACE,yBAAKA,IAAI,gHAEX,4BACE,yBAAKA,IAAI,sFAKjB,yBAAKF,UAAU,YACZQ,EAASa,KAAI,SAAAC,GAAO,OACnB,kBAAC,EAAD,CACEC,IAAKD,EAAQE,IACb5B,MAAO0B,EAAQ1B,MACfE,UAAWwB,EAAQxB,UACnBD,IAAKyB,EAAQzB,IACbE,UAAWuB,EAAQG,gBClDfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.815746e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Article.css\";\r\n\r\nconst TheVerge = ({ title, url, published, image_url }) => {\r\n  return (\r\n    <div className=\"article\">\r\n      <a href={url}>\r\n        <img src={image_url} alt={title} title={title}></img>\r\n      </a>\r\n      <div className=\"article__data\">\r\n        <a className=\"article__title\" href={url}>\r\n          {title}\r\n        </a>\r\n        <h5 className=\"article__published\">{published}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TheVerge;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport TheVerge from \"./components/TheVerge\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [articles, setArticles] = useState([]);\r\n  // const [interval, ToggleInterval] = useState(false);\r\n\r\n  const getMovies = async () => {\r\n    const {\r\n      data: { data }\r\n    } = await axios.get(\r\n      \"http://ec2-13-124-177-139.ap-northeast-2.compute.amazonaws.com:3001/scooter-news/techcrunch\"\r\n    );\r\n    console.log(data);\r\n    setLoading(false);\r\n    setArticles(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let id = setInterval(getMovies, 1000);\r\n    return () => clearInterval(id);\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {loading ? (\r\n        <div className=\"loader\">\r\n          <div className=\"loader__text\">Loading now...</div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"row\">\r\n          <header className=\"header__container\">\r\n            <div className=\"title\">\r\n              <span className=\"title__text\">Swimming Scooter News</span>\r\n            </div>\r\n            <nav>\r\n              <ul>\r\n                <li>\r\n                  <img\r\n                    className=\"bi__logo\"\r\n                    src=\"https://www.hi-interiors.com/wp-content/uploads/2019/08/kisspng-business-insider-logo-news-entrepreneurship-sangeet-5b3731a2d298e8.2945856615303438428626.png\"\r\n                  ></img>\r\n                </li>\r\n                <li>\r\n                  <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/The_Verge_logo.svg/1280px-The_Verge_logo.svg.png\"></img>\r\n                </li>\r\n                <li>\r\n                  <img src=\"http://v3.danielmall.com/articles/techcrunch-responsive-redesign/tc-logo5.svg\"></img>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </header>\r\n          <div className=\"articles\">\r\n            {articles.map(article => (\r\n              <TheVerge\r\n                key={article._id}\r\n                title={article.title}\r\n                published={article.published}\r\n                url={article.url}\r\n                image_url={article.image}\r\n              ></TheVerge>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}